/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jfpay.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-18")
public class CertificateBean implements org.apache.thrift.TBase<CertificateBean, CertificateBean._Fields>, java.io.Serializable, Cloneable, Comparable<CertificateBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CertificateBean");

  private static final org.apache.thrift.protocol.TField CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("customer", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("num_mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FLAG_AUDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("flag_audit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ID_TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("id_task", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATE_CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("date_check", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_EXAM_FIELD_DESC = new org.apache.thrift.protocol.TField("date_exam", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_AUDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("user_audit", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_PID_VALIDITY_FIELD_DESC = new org.apache.thrift.protocol.TField("date_pidValidity", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CODE_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("code_reject", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REASON_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("reason_reject", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VIPLEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("viplevel", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField AUDITTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("audittype", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CertificateBeanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CertificateBeanTupleSchemeFactory();

  public java.lang.String customer; // required
  public java.lang.String num_mobile; // required
  public java.lang.String flag_audit; // required
  public java.lang.String remark; // required
  public java.lang.String id_task; // required
  public java.lang.String date_check; // required
  public java.lang.String date_exam; // required
  public java.lang.String user_audit; // required
  public java.lang.String date_pidValidity; // required
  public java.lang.String code_reject; // required
  public java.lang.String reason_reject; // required
  public java.lang.String viplevel; // required
  public java.lang.String audittype; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUSTOMER((short)1, "customer"),
    NUM_MOBILE((short)2, "num_mobile"),
    FLAG_AUDIT((short)3, "flag_audit"),
    REMARK((short)4, "remark"),
    ID_TASK((short)5, "id_task"),
    DATE_CHECK((short)6, "date_check"),
    DATE_EXAM((short)7, "date_exam"),
    USER_AUDIT((short)8, "user_audit"),
    DATE_PID_VALIDITY((short)9, "date_pidValidity"),
    CODE_REJECT((short)10, "code_reject"),
    REASON_REJECT((short)11, "reason_reject"),
    VIPLEVEL((short)12, "viplevel"),
    AUDITTYPE((short)13, "audittype");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUSTOMER
          return CUSTOMER;
        case 2: // NUM_MOBILE
          return NUM_MOBILE;
        case 3: // FLAG_AUDIT
          return FLAG_AUDIT;
        case 4: // REMARK
          return REMARK;
        case 5: // ID_TASK
          return ID_TASK;
        case 6: // DATE_CHECK
          return DATE_CHECK;
        case 7: // DATE_EXAM
          return DATE_EXAM;
        case 8: // USER_AUDIT
          return USER_AUDIT;
        case 9: // DATE_PID_VALIDITY
          return DATE_PID_VALIDITY;
        case 10: // CODE_REJECT
          return CODE_REJECT;
        case 11: // REASON_REJECT
          return REASON_REJECT;
        case 12: // VIPLEVEL
          return VIPLEVEL;
        case 13: // AUDITTYPE
          return AUDITTYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("customer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("num_mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG_AUDIT, new org.apache.thrift.meta_data.FieldMetaData("flag_audit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_TASK, new org.apache.thrift.meta_data.FieldMetaData("id_task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_CHECK, new org.apache.thrift.meta_data.FieldMetaData("date_check", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_EXAM, new org.apache.thrift.meta_data.FieldMetaData("date_exam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_AUDIT, new org.apache.thrift.meta_data.FieldMetaData("user_audit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_PID_VALIDITY, new org.apache.thrift.meta_data.FieldMetaData("date_pidValidity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE_REJECT, new org.apache.thrift.meta_data.FieldMetaData("code_reject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REASON_REJECT, new org.apache.thrift.meta_data.FieldMetaData("reason_reject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIPLEVEL, new org.apache.thrift.meta_data.FieldMetaData("viplevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDITTYPE, new org.apache.thrift.meta_data.FieldMetaData("audittype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CertificateBean.class, metaDataMap);
  }

  public CertificateBean() {
  }

  public CertificateBean(
    java.lang.String customer,
    java.lang.String num_mobile,
    java.lang.String flag_audit,
    java.lang.String remark,
    java.lang.String id_task,
    java.lang.String date_check,
    java.lang.String date_exam,
    java.lang.String user_audit,
    java.lang.String date_pidValidity,
    java.lang.String code_reject,
    java.lang.String reason_reject,
    java.lang.String viplevel,
    java.lang.String audittype)
  {
    this();
    this.customer = customer;
    this.num_mobile = num_mobile;
    this.flag_audit = flag_audit;
    this.remark = remark;
    this.id_task = id_task;
    this.date_check = date_check;
    this.date_exam = date_exam;
    this.user_audit = user_audit;
    this.date_pidValidity = date_pidValidity;
    this.code_reject = code_reject;
    this.reason_reject = reason_reject;
    this.viplevel = viplevel;
    this.audittype = audittype;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CertificateBean(CertificateBean other) {
    if (other.isSetCustomer()) {
      this.customer = other.customer;
    }
    if (other.isSetNum_mobile()) {
      this.num_mobile = other.num_mobile;
    }
    if (other.isSetFlag_audit()) {
      this.flag_audit = other.flag_audit;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetId_task()) {
      this.id_task = other.id_task;
    }
    if (other.isSetDate_check()) {
      this.date_check = other.date_check;
    }
    if (other.isSetDate_exam()) {
      this.date_exam = other.date_exam;
    }
    if (other.isSetUser_audit()) {
      this.user_audit = other.user_audit;
    }
    if (other.isSetDate_pidValidity()) {
      this.date_pidValidity = other.date_pidValidity;
    }
    if (other.isSetCode_reject()) {
      this.code_reject = other.code_reject;
    }
    if (other.isSetReason_reject()) {
      this.reason_reject = other.reason_reject;
    }
    if (other.isSetViplevel()) {
      this.viplevel = other.viplevel;
    }
    if (other.isSetAudittype()) {
      this.audittype = other.audittype;
    }
  }

  public CertificateBean deepCopy() {
    return new CertificateBean(this);
  }

  @Override
  public void clear() {
    this.customer = null;
    this.num_mobile = null;
    this.flag_audit = null;
    this.remark = null;
    this.id_task = null;
    this.date_check = null;
    this.date_exam = null;
    this.user_audit = null;
    this.date_pidValidity = null;
    this.code_reject = null;
    this.reason_reject = null;
    this.viplevel = null;
    this.audittype = null;
  }

  public java.lang.String getCustomer() {
    return this.customer;
  }

  public CertificateBean setCustomer(java.lang.String customer) {
    this.customer = customer;
    return this;
  }

  public void unsetCustomer() {
    this.customer = null;
  }

  /** Returns true if field customer is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomer() {
    return this.customer != null;
  }

  public void setCustomerIsSet(boolean value) {
    if (!value) {
      this.customer = null;
    }
  }

  public java.lang.String getNum_mobile() {
    return this.num_mobile;
  }

  public CertificateBean setNum_mobile(java.lang.String num_mobile) {
    this.num_mobile = num_mobile;
    return this;
  }

  public void unsetNum_mobile() {
    this.num_mobile = null;
  }

  /** Returns true if field num_mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_mobile() {
    return this.num_mobile != null;
  }

  public void setNum_mobileIsSet(boolean value) {
    if (!value) {
      this.num_mobile = null;
    }
  }

  public java.lang.String getFlag_audit() {
    return this.flag_audit;
  }

  public CertificateBean setFlag_audit(java.lang.String flag_audit) {
    this.flag_audit = flag_audit;
    return this;
  }

  public void unsetFlag_audit() {
    this.flag_audit = null;
  }

  /** Returns true if field flag_audit is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag_audit() {
    return this.flag_audit != null;
  }

  public void setFlag_auditIsSet(boolean value) {
    if (!value) {
      this.flag_audit = null;
    }
  }

  public java.lang.String getRemark() {
    return this.remark;
  }

  public CertificateBean setRemark(java.lang.String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public java.lang.String getId_task() {
    return this.id_task;
  }

  public CertificateBean setId_task(java.lang.String id_task) {
    this.id_task = id_task;
    return this;
  }

  public void unsetId_task() {
    this.id_task = null;
  }

  /** Returns true if field id_task is set (has been assigned a value) and false otherwise */
  public boolean isSetId_task() {
    return this.id_task != null;
  }

  public void setId_taskIsSet(boolean value) {
    if (!value) {
      this.id_task = null;
    }
  }

  public java.lang.String getDate_check() {
    return this.date_check;
  }

  public CertificateBean setDate_check(java.lang.String date_check) {
    this.date_check = date_check;
    return this;
  }

  public void unsetDate_check() {
    this.date_check = null;
  }

  /** Returns true if field date_check is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_check() {
    return this.date_check != null;
  }

  public void setDate_checkIsSet(boolean value) {
    if (!value) {
      this.date_check = null;
    }
  }

  public java.lang.String getDate_exam() {
    return this.date_exam;
  }

  public CertificateBean setDate_exam(java.lang.String date_exam) {
    this.date_exam = date_exam;
    return this;
  }

  public void unsetDate_exam() {
    this.date_exam = null;
  }

  /** Returns true if field date_exam is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_exam() {
    return this.date_exam != null;
  }

  public void setDate_examIsSet(boolean value) {
    if (!value) {
      this.date_exam = null;
    }
  }

  public java.lang.String getUser_audit() {
    return this.user_audit;
  }

  public CertificateBean setUser_audit(java.lang.String user_audit) {
    this.user_audit = user_audit;
    return this;
  }

  public void unsetUser_audit() {
    this.user_audit = null;
  }

  /** Returns true if field user_audit is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_audit() {
    return this.user_audit != null;
  }

  public void setUser_auditIsSet(boolean value) {
    if (!value) {
      this.user_audit = null;
    }
  }

  public java.lang.String getDate_pidValidity() {
    return this.date_pidValidity;
  }

  public CertificateBean setDate_pidValidity(java.lang.String date_pidValidity) {
    this.date_pidValidity = date_pidValidity;
    return this;
  }

  public void unsetDate_pidValidity() {
    this.date_pidValidity = null;
  }

  /** Returns true if field date_pidValidity is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_pidValidity() {
    return this.date_pidValidity != null;
  }

  public void setDate_pidValidityIsSet(boolean value) {
    if (!value) {
      this.date_pidValidity = null;
    }
  }

  public java.lang.String getCode_reject() {
    return this.code_reject;
  }

  public CertificateBean setCode_reject(java.lang.String code_reject) {
    this.code_reject = code_reject;
    return this;
  }

  public void unsetCode_reject() {
    this.code_reject = null;
  }

  /** Returns true if field code_reject is set (has been assigned a value) and false otherwise */
  public boolean isSetCode_reject() {
    return this.code_reject != null;
  }

  public void setCode_rejectIsSet(boolean value) {
    if (!value) {
      this.code_reject = null;
    }
  }

  public java.lang.String getReason_reject() {
    return this.reason_reject;
  }

  public CertificateBean setReason_reject(java.lang.String reason_reject) {
    this.reason_reject = reason_reject;
    return this;
  }

  public void unsetReason_reject() {
    this.reason_reject = null;
  }

  /** Returns true if field reason_reject is set (has been assigned a value) and false otherwise */
  public boolean isSetReason_reject() {
    return this.reason_reject != null;
  }

  public void setReason_rejectIsSet(boolean value) {
    if (!value) {
      this.reason_reject = null;
    }
  }

  public java.lang.String getViplevel() {
    return this.viplevel;
  }

  public CertificateBean setViplevel(java.lang.String viplevel) {
    this.viplevel = viplevel;
    return this;
  }

  public void unsetViplevel() {
    this.viplevel = null;
  }

  /** Returns true if field viplevel is set (has been assigned a value) and false otherwise */
  public boolean isSetViplevel() {
    return this.viplevel != null;
  }

  public void setViplevelIsSet(boolean value) {
    if (!value) {
      this.viplevel = null;
    }
  }

  public java.lang.String getAudittype() {
    return this.audittype;
  }

  public CertificateBean setAudittype(java.lang.String audittype) {
    this.audittype = audittype;
    return this;
  }

  public void unsetAudittype() {
    this.audittype = null;
  }

  /** Returns true if field audittype is set (has been assigned a value) and false otherwise */
  public boolean isSetAudittype() {
    return this.audittype != null;
  }

  public void setAudittypeIsSet(boolean value) {
    if (!value) {
      this.audittype = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CUSTOMER:
      if (value == null) {
        unsetCustomer();
      } else {
        setCustomer((java.lang.String)value);
      }
      break;

    case NUM_MOBILE:
      if (value == null) {
        unsetNum_mobile();
      } else {
        setNum_mobile((java.lang.String)value);
      }
      break;

    case FLAG_AUDIT:
      if (value == null) {
        unsetFlag_audit();
      } else {
        setFlag_audit((java.lang.String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((java.lang.String)value);
      }
      break;

    case ID_TASK:
      if (value == null) {
        unsetId_task();
      } else {
        setId_task((java.lang.String)value);
      }
      break;

    case DATE_CHECK:
      if (value == null) {
        unsetDate_check();
      } else {
        setDate_check((java.lang.String)value);
      }
      break;

    case DATE_EXAM:
      if (value == null) {
        unsetDate_exam();
      } else {
        setDate_exam((java.lang.String)value);
      }
      break;

    case USER_AUDIT:
      if (value == null) {
        unsetUser_audit();
      } else {
        setUser_audit((java.lang.String)value);
      }
      break;

    case DATE_PID_VALIDITY:
      if (value == null) {
        unsetDate_pidValidity();
      } else {
        setDate_pidValidity((java.lang.String)value);
      }
      break;

    case CODE_REJECT:
      if (value == null) {
        unsetCode_reject();
      } else {
        setCode_reject((java.lang.String)value);
      }
      break;

    case REASON_REJECT:
      if (value == null) {
        unsetReason_reject();
      } else {
        setReason_reject((java.lang.String)value);
      }
      break;

    case VIPLEVEL:
      if (value == null) {
        unsetViplevel();
      } else {
        setViplevel((java.lang.String)value);
      }
      break;

    case AUDITTYPE:
      if (value == null) {
        unsetAudittype();
      } else {
        setAudittype((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CUSTOMER:
      return getCustomer();

    case NUM_MOBILE:
      return getNum_mobile();

    case FLAG_AUDIT:
      return getFlag_audit();

    case REMARK:
      return getRemark();

    case ID_TASK:
      return getId_task();

    case DATE_CHECK:
      return getDate_check();

    case DATE_EXAM:
      return getDate_exam();

    case USER_AUDIT:
      return getUser_audit();

    case DATE_PID_VALIDITY:
      return getDate_pidValidity();

    case CODE_REJECT:
      return getCode_reject();

    case REASON_REJECT:
      return getReason_reject();

    case VIPLEVEL:
      return getViplevel();

    case AUDITTYPE:
      return getAudittype();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CUSTOMER:
      return isSetCustomer();
    case NUM_MOBILE:
      return isSetNum_mobile();
    case FLAG_AUDIT:
      return isSetFlag_audit();
    case REMARK:
      return isSetRemark();
    case ID_TASK:
      return isSetId_task();
    case DATE_CHECK:
      return isSetDate_check();
    case DATE_EXAM:
      return isSetDate_exam();
    case USER_AUDIT:
      return isSetUser_audit();
    case DATE_PID_VALIDITY:
      return isSetDate_pidValidity();
    case CODE_REJECT:
      return isSetCode_reject();
    case REASON_REJECT:
      return isSetReason_reject();
    case VIPLEVEL:
      return isSetViplevel();
    case AUDITTYPE:
      return isSetAudittype();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CertificateBean)
      return this.equals((CertificateBean)that);
    return false;
  }

  public boolean equals(CertificateBean that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_customer = true && this.isSetCustomer();
    boolean that_present_customer = true && that.isSetCustomer();
    if (this_present_customer || that_present_customer) {
      if (!(this_present_customer && that_present_customer))
        return false;
      if (!this.customer.equals(that.customer))
        return false;
    }

    boolean this_present_num_mobile = true && this.isSetNum_mobile();
    boolean that_present_num_mobile = true && that.isSetNum_mobile();
    if (this_present_num_mobile || that_present_num_mobile) {
      if (!(this_present_num_mobile && that_present_num_mobile))
        return false;
      if (!this.num_mobile.equals(that.num_mobile))
        return false;
    }

    boolean this_present_flag_audit = true && this.isSetFlag_audit();
    boolean that_present_flag_audit = true && that.isSetFlag_audit();
    if (this_present_flag_audit || that_present_flag_audit) {
      if (!(this_present_flag_audit && that_present_flag_audit))
        return false;
      if (!this.flag_audit.equals(that.flag_audit))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_id_task = true && this.isSetId_task();
    boolean that_present_id_task = true && that.isSetId_task();
    if (this_present_id_task || that_present_id_task) {
      if (!(this_present_id_task && that_present_id_task))
        return false;
      if (!this.id_task.equals(that.id_task))
        return false;
    }

    boolean this_present_date_check = true && this.isSetDate_check();
    boolean that_present_date_check = true && that.isSetDate_check();
    if (this_present_date_check || that_present_date_check) {
      if (!(this_present_date_check && that_present_date_check))
        return false;
      if (!this.date_check.equals(that.date_check))
        return false;
    }

    boolean this_present_date_exam = true && this.isSetDate_exam();
    boolean that_present_date_exam = true && that.isSetDate_exam();
    if (this_present_date_exam || that_present_date_exam) {
      if (!(this_present_date_exam && that_present_date_exam))
        return false;
      if (!this.date_exam.equals(that.date_exam))
        return false;
    }

    boolean this_present_user_audit = true && this.isSetUser_audit();
    boolean that_present_user_audit = true && that.isSetUser_audit();
    if (this_present_user_audit || that_present_user_audit) {
      if (!(this_present_user_audit && that_present_user_audit))
        return false;
      if (!this.user_audit.equals(that.user_audit))
        return false;
    }

    boolean this_present_date_pidValidity = true && this.isSetDate_pidValidity();
    boolean that_present_date_pidValidity = true && that.isSetDate_pidValidity();
    if (this_present_date_pidValidity || that_present_date_pidValidity) {
      if (!(this_present_date_pidValidity && that_present_date_pidValidity))
        return false;
      if (!this.date_pidValidity.equals(that.date_pidValidity))
        return false;
    }

    boolean this_present_code_reject = true && this.isSetCode_reject();
    boolean that_present_code_reject = true && that.isSetCode_reject();
    if (this_present_code_reject || that_present_code_reject) {
      if (!(this_present_code_reject && that_present_code_reject))
        return false;
      if (!this.code_reject.equals(that.code_reject))
        return false;
    }

    boolean this_present_reason_reject = true && this.isSetReason_reject();
    boolean that_present_reason_reject = true && that.isSetReason_reject();
    if (this_present_reason_reject || that_present_reason_reject) {
      if (!(this_present_reason_reject && that_present_reason_reject))
        return false;
      if (!this.reason_reject.equals(that.reason_reject))
        return false;
    }

    boolean this_present_viplevel = true && this.isSetViplevel();
    boolean that_present_viplevel = true && that.isSetViplevel();
    if (this_present_viplevel || that_present_viplevel) {
      if (!(this_present_viplevel && that_present_viplevel))
        return false;
      if (!this.viplevel.equals(that.viplevel))
        return false;
    }

    boolean this_present_audittype = true && this.isSetAudittype();
    boolean that_present_audittype = true && that.isSetAudittype();
    if (this_present_audittype || that_present_audittype) {
      if (!(this_present_audittype && that_present_audittype))
        return false;
      if (!this.audittype.equals(that.audittype))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCustomer()) ? 131071 : 524287);
    if (isSetCustomer())
      hashCode = hashCode * 8191 + customer.hashCode();

    hashCode = hashCode * 8191 + ((isSetNum_mobile()) ? 131071 : 524287);
    if (isSetNum_mobile())
      hashCode = hashCode * 8191 + num_mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetFlag_audit()) ? 131071 : 524287);
    if (isSetFlag_audit())
      hashCode = hashCode * 8191 + flag_audit.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    hashCode = hashCode * 8191 + ((isSetId_task()) ? 131071 : 524287);
    if (isSetId_task())
      hashCode = hashCode * 8191 + id_task.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate_check()) ? 131071 : 524287);
    if (isSetDate_check())
      hashCode = hashCode * 8191 + date_check.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate_exam()) ? 131071 : 524287);
    if (isSetDate_exam())
      hashCode = hashCode * 8191 + date_exam.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser_audit()) ? 131071 : 524287);
    if (isSetUser_audit())
      hashCode = hashCode * 8191 + user_audit.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate_pidValidity()) ? 131071 : 524287);
    if (isSetDate_pidValidity())
      hashCode = hashCode * 8191 + date_pidValidity.hashCode();

    hashCode = hashCode * 8191 + ((isSetCode_reject()) ? 131071 : 524287);
    if (isSetCode_reject())
      hashCode = hashCode * 8191 + code_reject.hashCode();

    hashCode = hashCode * 8191 + ((isSetReason_reject()) ? 131071 : 524287);
    if (isSetReason_reject())
      hashCode = hashCode * 8191 + reason_reject.hashCode();

    hashCode = hashCode * 8191 + ((isSetViplevel()) ? 131071 : 524287);
    if (isSetViplevel())
      hashCode = hashCode * 8191 + viplevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetAudittype()) ? 131071 : 524287);
    if (isSetAudittype())
      hashCode = hashCode * 8191 + audittype.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CertificateBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCustomer()).compareTo(other.isSetCustomer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customer, other.customer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_mobile()).compareTo(other.isSetNum_mobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_mobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_mobile, other.num_mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlag_audit()).compareTo(other.isSetFlag_audit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag_audit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag_audit, other.flag_audit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId_task()).compareTo(other.isSetId_task());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_task()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_task, other.id_task);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate_check()).compareTo(other.isSetDate_check());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_check()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_check, other.date_check);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate_exam()).compareTo(other.isSetDate_exam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_exam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_exam, other.date_exam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUser_audit()).compareTo(other.isSetUser_audit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_audit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_audit, other.user_audit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate_pidValidity()).compareTo(other.isSetDate_pidValidity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_pidValidity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_pidValidity, other.date_pidValidity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCode_reject()).compareTo(other.isSetCode_reject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode_reject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_reject, other.code_reject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReason_reject()).compareTo(other.isSetReason_reject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason_reject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason_reject, other.reason_reject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViplevel()).compareTo(other.isSetViplevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViplevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viplevel, other.viplevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAudittype()).compareTo(other.isSetAudittype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudittype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audittype, other.audittype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CertificateBean(");
    boolean first = true;

    sb.append("customer:");
    if (this.customer == null) {
      sb.append("null");
    } else {
      sb.append(this.customer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_mobile:");
    if (this.num_mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.num_mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag_audit:");
    if (this.flag_audit == null) {
      sb.append("null");
    } else {
      sb.append(this.flag_audit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id_task:");
    if (this.id_task == null) {
      sb.append("null");
    } else {
      sb.append(this.id_task);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_check:");
    if (this.date_check == null) {
      sb.append("null");
    } else {
      sb.append(this.date_check);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_exam:");
    if (this.date_exam == null) {
      sb.append("null");
    } else {
      sb.append(this.date_exam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_audit:");
    if (this.user_audit == null) {
      sb.append("null");
    } else {
      sb.append(this.user_audit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_pidValidity:");
    if (this.date_pidValidity == null) {
      sb.append("null");
    } else {
      sb.append(this.date_pidValidity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code_reject:");
    if (this.code_reject == null) {
      sb.append("null");
    } else {
      sb.append(this.code_reject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason_reject:");
    if (this.reason_reject == null) {
      sb.append("null");
    } else {
      sb.append(this.reason_reject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viplevel:");
    if (this.viplevel == null) {
      sb.append("null");
    } else {
      sb.append(this.viplevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audittype:");
    if (this.audittype == null) {
      sb.append("null");
    } else {
      sb.append(this.audittype);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CertificateBeanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CertificateBeanStandardScheme getScheme() {
      return new CertificateBeanStandardScheme();
    }
  }

  private static class CertificateBeanStandardScheme extends org.apache.thrift.scheme.StandardScheme<CertificateBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CertificateBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUSTOMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customer = iprot.readString();
              struct.setCustomerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.num_mobile = iprot.readString();
              struct.setNum_mobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FLAG_AUDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flag_audit = iprot.readString();
              struct.setFlag_auditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID_TASK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id_task = iprot.readString();
              struct.setId_taskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATE_CHECK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date_check = iprot.readString();
              struct.setDate_checkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE_EXAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date_exam = iprot.readString();
              struct.setDate_examIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_AUDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_audit = iprot.readString();
              struct.setUser_auditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE_PID_VALIDITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date_pidValidity = iprot.readString();
              struct.setDate_pidValidityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CODE_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code_reject = iprot.readString();
              struct.setCode_rejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REASON_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason_reject = iprot.readString();
              struct.setReason_rejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VIPLEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viplevel = iprot.readString();
              struct.setViplevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AUDITTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audittype = iprot.readString();
              struct.setAudittypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CertificateBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.customer != null) {
        oprot.writeFieldBegin(CUSTOMER_FIELD_DESC);
        oprot.writeString(struct.customer);
        oprot.writeFieldEnd();
      }
      if (struct.num_mobile != null) {
        oprot.writeFieldBegin(NUM_MOBILE_FIELD_DESC);
        oprot.writeString(struct.num_mobile);
        oprot.writeFieldEnd();
      }
      if (struct.flag_audit != null) {
        oprot.writeFieldBegin(FLAG_AUDIT_FIELD_DESC);
        oprot.writeString(struct.flag_audit);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.id_task != null) {
        oprot.writeFieldBegin(ID_TASK_FIELD_DESC);
        oprot.writeString(struct.id_task);
        oprot.writeFieldEnd();
      }
      if (struct.date_check != null) {
        oprot.writeFieldBegin(DATE_CHECK_FIELD_DESC);
        oprot.writeString(struct.date_check);
        oprot.writeFieldEnd();
      }
      if (struct.date_exam != null) {
        oprot.writeFieldBegin(DATE_EXAM_FIELD_DESC);
        oprot.writeString(struct.date_exam);
        oprot.writeFieldEnd();
      }
      if (struct.user_audit != null) {
        oprot.writeFieldBegin(USER_AUDIT_FIELD_DESC);
        oprot.writeString(struct.user_audit);
        oprot.writeFieldEnd();
      }
      if (struct.date_pidValidity != null) {
        oprot.writeFieldBegin(DATE_PID_VALIDITY_FIELD_DESC);
        oprot.writeString(struct.date_pidValidity);
        oprot.writeFieldEnd();
      }
      if (struct.code_reject != null) {
        oprot.writeFieldBegin(CODE_REJECT_FIELD_DESC);
        oprot.writeString(struct.code_reject);
        oprot.writeFieldEnd();
      }
      if (struct.reason_reject != null) {
        oprot.writeFieldBegin(REASON_REJECT_FIELD_DESC);
        oprot.writeString(struct.reason_reject);
        oprot.writeFieldEnd();
      }
      if (struct.viplevel != null) {
        oprot.writeFieldBegin(VIPLEVEL_FIELD_DESC);
        oprot.writeString(struct.viplevel);
        oprot.writeFieldEnd();
      }
      if (struct.audittype != null) {
        oprot.writeFieldBegin(AUDITTYPE_FIELD_DESC);
        oprot.writeString(struct.audittype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CertificateBeanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CertificateBeanTupleScheme getScheme() {
      return new CertificateBeanTupleScheme();
    }
  }

  private static class CertificateBeanTupleScheme extends org.apache.thrift.scheme.TupleScheme<CertificateBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CertificateBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCustomer()) {
        optionals.set(0);
      }
      if (struct.isSetNum_mobile()) {
        optionals.set(1);
      }
      if (struct.isSetFlag_audit()) {
        optionals.set(2);
      }
      if (struct.isSetRemark()) {
        optionals.set(3);
      }
      if (struct.isSetId_task()) {
        optionals.set(4);
      }
      if (struct.isSetDate_check()) {
        optionals.set(5);
      }
      if (struct.isSetDate_exam()) {
        optionals.set(6);
      }
      if (struct.isSetUser_audit()) {
        optionals.set(7);
      }
      if (struct.isSetDate_pidValidity()) {
        optionals.set(8);
      }
      if (struct.isSetCode_reject()) {
        optionals.set(9);
      }
      if (struct.isSetReason_reject()) {
        optionals.set(10);
      }
      if (struct.isSetViplevel()) {
        optionals.set(11);
      }
      if (struct.isSetAudittype()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCustomer()) {
        oprot.writeString(struct.customer);
      }
      if (struct.isSetNum_mobile()) {
        oprot.writeString(struct.num_mobile);
      }
      if (struct.isSetFlag_audit()) {
        oprot.writeString(struct.flag_audit);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetId_task()) {
        oprot.writeString(struct.id_task);
      }
      if (struct.isSetDate_check()) {
        oprot.writeString(struct.date_check);
      }
      if (struct.isSetDate_exam()) {
        oprot.writeString(struct.date_exam);
      }
      if (struct.isSetUser_audit()) {
        oprot.writeString(struct.user_audit);
      }
      if (struct.isSetDate_pidValidity()) {
        oprot.writeString(struct.date_pidValidity);
      }
      if (struct.isSetCode_reject()) {
        oprot.writeString(struct.code_reject);
      }
      if (struct.isSetReason_reject()) {
        oprot.writeString(struct.reason_reject);
      }
      if (struct.isSetViplevel()) {
        oprot.writeString(struct.viplevel);
      }
      if (struct.isSetAudittype()) {
        oprot.writeString(struct.audittype);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CertificateBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.customer = iprot.readString();
        struct.setCustomerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num_mobile = iprot.readString();
        struct.setNum_mobileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.flag_audit = iprot.readString();
        struct.setFlag_auditIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.id_task = iprot.readString();
        struct.setId_taskIsSet(true);
      }
      if (incoming.get(5)) {
        struct.date_check = iprot.readString();
        struct.setDate_checkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.date_exam = iprot.readString();
        struct.setDate_examIsSet(true);
      }
      if (incoming.get(7)) {
        struct.user_audit = iprot.readString();
        struct.setUser_auditIsSet(true);
      }
      if (incoming.get(8)) {
        struct.date_pidValidity = iprot.readString();
        struct.setDate_pidValidityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.code_reject = iprot.readString();
        struct.setCode_rejectIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reason_reject = iprot.readString();
        struct.setReason_rejectIsSet(true);
      }
      if (incoming.get(11)) {
        struct.viplevel = iprot.readString();
        struct.setViplevelIsSet(true);
      }
      if (incoming.get(12)) {
        struct.audittype = iprot.readString();
        struct.setAudittypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

