/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jfpay.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-18")
public class CertificateResp implements org.apache.thrift.TBase<CertificateResp, CertificateResp._Fields>, java.io.Serializable, Cloneable, Comparable<CertificateResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CertificateResp");

  private static final org.apache.thrift.protocol.TField CODE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("code_resp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("message_resp", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CertificateRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CertificateRespTupleSchemeFactory();

  public java.lang.String code_resp; // required
  public java.lang.String message_resp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE_RESP((short)1, "code_resp"),
    MESSAGE_RESP((short)2, "message_resp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE_RESP
          return CODE_RESP;
        case 2: // MESSAGE_RESP
          return MESSAGE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE_RESP, new org.apache.thrift.meta_data.FieldMetaData("code_resp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_RESP, new org.apache.thrift.meta_data.FieldMetaData("message_resp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CertificateResp.class, metaDataMap);
  }

  public CertificateResp() {
  }

  public CertificateResp(
    java.lang.String code_resp,
    java.lang.String message_resp)
  {
    this();
    this.code_resp = code_resp;
    this.message_resp = message_resp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CertificateResp(CertificateResp other) {
    if (other.isSetCode_resp()) {
      this.code_resp = other.code_resp;
    }
    if (other.isSetMessage_resp()) {
      this.message_resp = other.message_resp;
    }
  }

  public CertificateResp deepCopy() {
    return new CertificateResp(this);
  }

  @Override
  public void clear() {
    this.code_resp = null;
    this.message_resp = null;
  }

  public java.lang.String getCode_resp() {
    return this.code_resp;
  }

  public CertificateResp setCode_resp(java.lang.String code_resp) {
    this.code_resp = code_resp;
    return this;
  }

  public void unsetCode_resp() {
    this.code_resp = null;
  }

  /** Returns true if field code_resp is set (has been assigned a value) and false otherwise */
  public boolean isSetCode_resp() {
    return this.code_resp != null;
  }

  public void setCode_respIsSet(boolean value) {
    if (!value) {
      this.code_resp = null;
    }
  }

  public java.lang.String getMessage_resp() {
    return this.message_resp;
  }

  public CertificateResp setMessage_resp(java.lang.String message_resp) {
    this.message_resp = message_resp;
    return this;
  }

  public void unsetMessage_resp() {
    this.message_resp = null;
  }

  /** Returns true if field message_resp is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage_resp() {
    return this.message_resp != null;
  }

  public void setMessage_respIsSet(boolean value) {
    if (!value) {
      this.message_resp = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CODE_RESP:
      if (value == null) {
        unsetCode_resp();
      } else {
        setCode_resp((java.lang.String)value);
      }
      break;

    case MESSAGE_RESP:
      if (value == null) {
        unsetMessage_resp();
      } else {
        setMessage_resp((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE_RESP:
      return getCode_resp();

    case MESSAGE_RESP:
      return getMessage_resp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CODE_RESP:
      return isSetCode_resp();
    case MESSAGE_RESP:
      return isSetMessage_resp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CertificateResp)
      return this.equals((CertificateResp)that);
    return false;
  }

  public boolean equals(CertificateResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_code_resp = true && this.isSetCode_resp();
    boolean that_present_code_resp = true && that.isSetCode_resp();
    if (this_present_code_resp || that_present_code_resp) {
      if (!(this_present_code_resp && that_present_code_resp))
        return false;
      if (!this.code_resp.equals(that.code_resp))
        return false;
    }

    boolean this_present_message_resp = true && this.isSetMessage_resp();
    boolean that_present_message_resp = true && that.isSetMessage_resp();
    if (this_present_message_resp || that_present_message_resp) {
      if (!(this_present_message_resp && that_present_message_resp))
        return false;
      if (!this.message_resp.equals(that.message_resp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCode_resp()) ? 131071 : 524287);
    if (isSetCode_resp())
      hashCode = hashCode * 8191 + code_resp.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessage_resp()) ? 131071 : 524287);
    if (isSetMessage_resp())
      hashCode = hashCode * 8191 + message_resp.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CertificateResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCode_resp()).compareTo(other.isSetCode_resp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode_resp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_resp, other.code_resp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessage_resp()).compareTo(other.isSetMessage_resp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage_resp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message_resp, other.message_resp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CertificateResp(");
    boolean first = true;

    sb.append("code_resp:");
    if (this.code_resp == null) {
      sb.append("null");
    } else {
      sb.append(this.code_resp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message_resp:");
    if (this.message_resp == null) {
      sb.append("null");
    } else {
      sb.append(this.message_resp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CertificateRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CertificateRespStandardScheme getScheme() {
      return new CertificateRespStandardScheme();
    }
  }

  private static class CertificateRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<CertificateResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CertificateResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code_resp = iprot.readString();
              struct.setCode_respIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message_resp = iprot.readString();
              struct.setMessage_respIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CertificateResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.code_resp != null) {
        oprot.writeFieldBegin(CODE_RESP_FIELD_DESC);
        oprot.writeString(struct.code_resp);
        oprot.writeFieldEnd();
      }
      if (struct.message_resp != null) {
        oprot.writeFieldBegin(MESSAGE_RESP_FIELD_DESC);
        oprot.writeString(struct.message_resp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CertificateRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CertificateRespTupleScheme getScheme() {
      return new CertificateRespTupleScheme();
    }
  }

  private static class CertificateRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<CertificateResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CertificateResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCode_resp()) {
        optionals.set(0);
      }
      if (struct.isSetMessage_resp()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCode_resp()) {
        oprot.writeString(struct.code_resp);
      }
      if (struct.isSetMessage_resp()) {
        oprot.writeString(struct.message_resp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CertificateResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.code_resp = iprot.readString();
        struct.setCode_respIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message_resp = iprot.readString();
        struct.setMessage_respIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

