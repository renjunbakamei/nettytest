<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
    default-autowire="byName">

    <!-- 默认数据库配置 -->
	<bean id="dataSourceRead" class="com.zaxxer.hikari.HikariDataSource"
          destroy-method="close">
        <property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.138:1521/coredb" />
        <property name="username" value="jfpay" />
        <property name="password" value="aaa111" />
        <!-- 连接只读数据库时配置为true， 保证安全 -->
        <property name="readOnly" value="false" />
        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
        <property name="connectionTimeout" value="30000" />
        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
        <property name="idleTimeout" value="600000" />
        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
        <property name="maxLifetime" value="1800000" />
        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
        <property name="maximumPoolSize" value="15" />
    </bean>

    <bean id="impTransactionManagerRead" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceRead" />
    </bean>

    <bean name="impTransactionTemplateRead" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="impTransactionManagerRead" />
    </bean>


     <bean id="dataSourceWrite" class="com.zaxxer.hikari.HikariDataSource"
           destroy-method="close">
         <property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.138:1521/coredb" />
         <property name="username" value="jfpay" />
         <property name="password" value="aaa111" />
         <!-- 连接只读数据库时配置为true， 保证安全 -->
         <property name="readOnly" value="false" />
         <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
         <property name="connectionTimeout" value="30000" />
         <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
         <property name="idleTimeout" value="600000" />
         <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
         <property name="maxLifetime" value="1800000" />
         <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
         <property name="maximumPoolSize" value="15" />
    </bean>

    <bean id="impTransactionManagerWrite" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceWrite" />
    </bean>





	<!--
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	-->

	<tx:advice id="txAdvice" transaction-manager="impTransactionManagerWrite">
		<tx:attributes>
		<tx:method name="invoke" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!--<aop:config>-->
		<!--<aop:pointcut id="productServiceMethods"-->
			<!--expression="execution(* com.jfpay.test.service..*.*(..)) " />-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="productServiceMethods" />-->
	<!--</aop:config>-->


	<bean id="parentSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" abstract="true" lazy-init="true">
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=oracle
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<bean id="parentMapperScanner" class="tk.mybatis.spring.mapper.MapperScannerConfigurer" abstract="true" lazy-init="true">
		<property name="properties">
			<value>
				mappers=tk.mybatis.mapper.common.Mapper
				ORDER=BEFORE
			</value>
		</property>
	</bean>


	<bean id="parentSqlSessionFactoryMysql" class="org.mybatis.spring.SqlSessionFactoryBean" abstract="true" lazy-init="true">
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <bean id="parentMapperScannerMysql" class="tk.mybatis.spring.mapper.MapperScannerConfigurer" abstract="true" lazy-init="true">
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                ORDER=BEFORE
            </value>
        </property>
    </bean>

</beans>
